name: unity unittest

on: 
  workflow_dispatch:
  push:
    paths: 
      - unity/Assets/**
      - unity/test/**
      - unity/native/**
      - unity/cli/**
      - unreal/Puerts/Source/JsEnv/Private/V8InspectorImpl.cpp
      - unreal/Puerts/Source/JsEnv/Private/V8InspectorImpl.h
      - unreal/Puerts/Source/JsEnv/Private/WebSocketImpl.cpp
      - unreal/Puerts/Source/JsEnv/Private/PromiseRejectCallback.hpp
      - .github/workflows/unity_unittest.yml
      - .github/workflows/composites/**
  pull_request:
    paths: 
      - unity/Assets/**
      - unity/test/**
      - unity/native/**
      - unity/cli/**
      - unreal/Puerts/Source/JsEnv/Private/V8InspectorImpl.cpp
      - unreal/Puerts/Source/JsEnv/Private/V8InspectorImpl.h
      - unreal/Puerts/Source/JsEnv/Private/WebSocketImpl.cpp
      - unreal/Puerts/Source/JsEnv/Private/PromiseRejectCallback.hpp
      - .github/workflows/unity_unittest.yml
      - .github/workflows/composites/**
#    branches-ignore:
#      - 'unity-3.0.0'
  
env:
  RUNID: 613573412

jobs:
#  unittest-win-unity:
#    runs-on: windows-2022
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Setup Unity
#        uses: ./.github/workflows/composites/unity-setup/
#        with:
#          os: 'win'
#          version: '2022.3.59f1'
#          cachekey: 'unity2022x64'
#          install_path: C:/UNITY
#          unity_modules: windows-il2cpp
#          UNITY_USERNAME: ${{ secrets.UNITY_USERNAME }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
#      - name: UnitTest
#        run: |
#          cd unity
#          npm i
#          cd test/unity
#          node ../../cli unity-test --unity C:/UNITY/2022.3.59f1/Editor/Unity.exe
#      - name: TestResult
##        if: always()
#        shell: bash
#        run: |
#          cd unity/test/unity
#          echo "testresult in v2(reflection)"
#          cat log2.txt | grep "Failed\|Passed" 
#          echo "testresult in v2"
#          cat log3.txt | grep "Failed\|Passed" 

  unittest-osx-unity:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Unity
        uses: ./.github/workflows/composites/unity-setup/
        with:
          os: 'osx'
          version: '2022.3.59f1'
          cachekey: 'unity2022arm64'
          install_path: /Applications/UNITY
          unity_modules: mac-il2cpp
          architecture: arm64
          UNITY_USERNAME: ${{ secrets.UNITY_USERNAME }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
      - name: UnitTest
        run: |
          cd unity
          npm i
          cd test/unity
          node ../../cli unity-test --unity /Applications/UNITY/2022.3.59f1/Unity.app/Contents/MacOS/Unity
      - name: TestResult
#        if: always()
        shell: bash
        run: |
          cd unity/test/unity
          log_files=(
            "log_reflection.txt"
            "log_qjs_reflection.txt"
            "log_nodejs_reflection.txt"
            "log_minimum_reflection.txt"
            "log_qjs_minimum_reflection.txt"
            "log_nodejs_minimum_reflection.txt"
            "log_full_wrapper.txt"
            "log_qjs_full_wrapper.txt"
            "log_nodejs_full_wrapper.txt"
          )
          for log_file in "${log_files[@]}"; do
            echo "Processing $log_file"
            grep "ENV_BACKEND" "$log_file" || true
            passed_count=$(grep -c "Passed" "$log_file" || true)
            echo "Passed: $passed_count"
            failed_count=$(grep -c "Failed" "$log_file" || true)
            echo "Failed: $failed_count"
            grep "Failed" "$log_file" || true
            echo
          done
          

  unittest-win-dotnet:
    runs-on: windows-2022
    steps:
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x.x'
      - uses: actions/checkout@v3
      - name: UnitTest-v8
        run: |
          cd unity
          npm i
          cd test/dotnet
          node ../../cli dotnet-test v8_9.4
      - name: UnitTest-nodejs
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -sn
      - name: UnitTest-quickjs
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -sq
      - name: UnitTest-v8-ts
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -ts
          
  unittest-osx-dotnet:
    runs-on: macos-latest

    steps:
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x.x'
      - uses: actions/checkout@v3
      - name: UnitTest-v8
        run: |
          cd unity
          npm i
          cd test/dotnet
          node ../../cli dotnet-test
      - name: UnitTest-nodejs
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -sn
      - name: UnitTest-quickjs
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -sq
      - name: UnitTest-v8-ts
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -ts
          
  unittest-linux-dotnet:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x.x'
      - uses: actions/checkout@v3
      - name: Install LibC++
        run: |
          sudo apt-get update
          sudo apt-get install clang
          sudo apt-get install build-essential
          sudo apt-get install libc++-dev
          sudo apt-get install libc++abi-dev
      - name: UnitTest-v8
        run: |
          cd unity
          npm i
          cd test/dotnet
          node ../../cli dotnet-test
      - name: UnitTest-nodejs
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -sn
      - name: UnitTest-quickjs
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -sq
      - name: UnitTest-v8-ts
        run: |
          cd unity/test/dotnet
          node ../../cli dotnet-test -ts