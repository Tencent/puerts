{{
function parameterDef(pinfo, isStatic, type) {
    return (pinfo.IsParams ? ("..." + pinfo.Name) : "$" + pinfo.Name) + (pinfo.IsOptional?"?":"") + ": " + (isStatic ? typeNameWithOutGenericType(type, pinfo.TypeName) : pinfo.TypeName);
}
function typeKeyword(type) {
    if (type.IsDelegate) {
        return 'interface';
    } else if (type.IsInterface) {
        return 'interface';
    } else if (type.IsEnum) {
        return 'enum';
    } else {
        return 'class'
    }
}

function toJsArray(csArr) {
    let arr = [];
    for(var i = 0; i < csArr.Length; i++) {
        arr.push(csArr.get_Item(i));
    }
    return arr;
}
function formatPropertyOrMethodName(name) {
    /*处理explicit interface implementation*/
    if (name.indexOf(".") != -1) {
        return name.split(".").pop();
    } else {
        return name;
    }
}
function distinctByName(arr) {
    const exist = {};
    return toJsArray(arr).filter(item=> {
        const itemExist = exist[item.Name];
        exist[item.Name] = true;
        return !itemExist;
    });

}
function typeDeclaration(type, level1) {
    var result = type.Name;
    if (type.IsGenericTypeDefinition) {
        result += "<" + Array.prototype.join.call(toJsArray(type.GenericParameters), ', ') + ">";
    }
    if (level1 && type.BaseType) {
        result += " extends " + typeDeclaration(type.BaseType);
    }
    var interfaces = type.interfaces ? toJsArray(type.interfaces) : [];
    if (level1 && !type.IsDelegate && !type.IsEnum && interfaces.length) {
        result += ((type.IsInterface ? " extends " : " implements ") + interfaces.map(interface=> typeDeclaration(interface)).join(', '))
    }
    if (!level1 && type.Namespace) {
        result = type.Namespace + "." + result;
    }
    return result;
}
function indent(str, n) {
    let lines = str.split(/[\n\r]/);
    let newLines = [lines[0]];
    let append = " ".repeat(n);
    for(var i = 1; i < lines.length; i++) {
        if (lines[i]) newLines.push(append + lines[i]);
    }
    return newLines.join('\n');
}
function typeNameWithOutGenericType(typeinfo, name) {
    if (typeinfo.IsGenericTypeDefinition) {
        const gParameters = toJsArray(typeinfo.GenericParameters);
        return gParameters.indexOf(name) != -1 ? "any" : name
    }
    return name;
}
}}
declare module 'csharp' {
    interface $Ref<T> {
        value: T
    }
    
    namespace System {
        interface Array$1<T> extends System.Array {
            get_Item(index: number):T;
            
            set_Item(index: number, value: T):void;
        }
    }
    
    {{=it.TaskDef}}
    
    {{~it.NamespaceInfos :ns}}{{?ns.Name}}namespace {{=ns.Name}} {{{?}}
        {{~ns.Types :type}}{{=indent(type.Document, 8)}}
        {{=typeKeyword(type)}} {{=typeDeclaration(type, true)}}{{
            `==condition start======================`;
            if(type.IsDelegate){        `//type is delegate`;
        }} { {{=type.DelegateDef.replace('=>', ':')}}; } {{?!type.IsGenericTypeDefinition}}
        var {{=type.Name}}: {new (func: {{=type.DelegateDef}}): {{=type.Name}};}{{?}}{{ 
            } else if(type.IsEnum) {    `//type is enum`;
        }}{ {{= type.EnumKeyValues}} }{{ 
            } else {                    `//type is class or interface`;
        }}{ {{
                `==for start======================`;
                var props = distinctByName(type.Properties); 
                for (var i = 0; i < props.length; i++) {    
                    var property = props[i]; 
            }}
            {{=indent(property.Document, 12)}}{{ `//prop is field or type is interface`; var allowProperty = !type.IsInterface && (property.HasSetter || property.HasGetter); if(!allowProperty) { }}
            {{?!type.IsInterface}}public {{?}}{{?property.IsStatic}}static {{?}}{{=formatPropertyOrMethodName(property.Name)}}: {{=property.IsStatic ? typeNameWithOutGenericType(type, property.TypeName) : property.TypeName}};{{continue;}}}
            {{?property.HasGetter}}public {{?property.IsStatic}}static {{?}}get {{=formatPropertyOrMethodName(property.Name)}}(): {{=property.IsStatic ? typeNameWithOutGenericType(type, property.TypeName) : property.TypeName}};{{?}}
            {{?property.HasSetter}}public {{?property.IsStatic}}static {{?}}set {{=formatPropertyOrMethodName(property.Name)}}(value: {{=property.IsStatic ? typeNameWithOutGenericType(type, property.TypeName) : property.TypeName}});{{?}}{{  } `==for end======================`;}}
            {{~type.Methods :method}}{{=indent(method.Document, 12)}}
            {{?!type.IsInterface}}public {{?}}{{?method.IsStatic}}static {{?}}{{=formatPropertyOrMethodName(method.Name)}}({{~method.ParameterInfos :pinfo:idx}}{{?idx>0}}, {{?}}{{=parameterDef(pinfo, method.IsStatic, type)}}{{~}}){{=method.IsConstructor?"":(":" + (method.IsStatic ? typeNameWithOutGenericType(type, method.TypeName) : method.TypeName))}};
            {{~}}
        }{{} 
            `==condition end======================`;}}
        {{?type.ExtensionMethods.Length > 0}}
        {{=indent(type.Document, 8)}}
        interface {{=type.Name}} {
            {{~type.ExtensionMethods :method}}{{=indent(method.Document, 12)}}
            {{=formatPropertyOrMethodName(method.Name)}}({{~method.ParameterInfos :pinfo:idx}}{{?idx>0}}, {{?}}{{=parameterDef(pinfo)}}{{~}}):{{=method.TypeName}};
            {{~}}
        }
        {{?}}
        {{~}}
    {{?ns.Name}}}{{?}}
    {{~}}
}