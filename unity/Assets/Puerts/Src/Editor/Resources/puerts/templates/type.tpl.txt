{{?it.Namespaces}}{{~it.Namespaces :name}}
using {{=name}};{{~}}
{{?}}
{{
const fixGet = {
    char: 'GetChar',
    sbyte: 'GetSByte',
    byte: 'GetByte',
    short: 'GetInt16',
    ushort: 'GetUInt16',
    int: 'GetInt32',
    uint: 'GetUInt32',
    long: 'GetInt64',
    ulong: 'GetUInt64',
    double: 'GetDouble',
    float: 'GetFloat',
    bool: 'GetBoolean',
    string: 'GetString',
    DateTime: 'GetDateTime',
};
const fixReturn = {
    char: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    sbyte: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    byte: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    short: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    ushort: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    int: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    uint: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    long: 'Puerts.PuertsDLL.ReturnBigInt(isolate, info, result)',
    ulong: 'Puerts.PuertsDLL.ReturnBigInt(isolate, info, (long)result)',
    double: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    float: 'Puerts.PuertsDLL.ReturnNumber(isolate, info, result)',
    bool: 'Puerts.PuertsDLL.ReturnBoolean(isolate, info, result)',
    string: 'Puerts.PuertsDLL.ReturnString(isolate, info, result)',
    DateTime: 'Puerts.PuertsDLL.ReturnDate(isolate, info, (result - new DateTime(1970, 1, 1)).TotalMilliseconds)',
};
const operatorMap = {
    op_Equality: '==',
    op_Inequality: '!=',
    op_GreaterThan: '>',
    op_LessThan: '<',
    op_GreaterThanOrEqual: '>=',
    op_LessThanOrEqual: '<=',
    op_BitwiseAnd: '&',
    op_BitwiseOr: '|',
    op_Addition: '+',
    op_Subtraction: '-',
    op_Division: '/',
    op_Modulus: '%',
    op_Multiply: '*',
    op_LeftShift: '<<',
    op_RightShift: '>>',
    op_ExclusiveOr: '^',
    op_UnaryNegation: '-',
    op_UnaryPlus: '+',
    op_LogicalNot: '!',
    op_OnesComplement: '~',
    op_False: '',
    op_True: '',
    op_Increment: '++',
    op_Decrement: '--',
};
let csharpKeywords = {};
[
    "abstract", "as", "base", "bool",
    "break", "byte", "case", "catch",
    "char", "checked", "class", "const",
    "continue", "decimal", "default", "delegate",
    "do", "double", "else", "enum",
    "event", "explicit", "extern", "false",
    "finally", "fixed", "float", "for",
    "foreach", "goto", "if", "implicit",
    "in", "int", "interface",
    "internal", "is", "lock", "long",
    "namespace", "new", "null", "object",
    "operator", "out", "override",
    "params", "private", "protected", "public",
    "readonly", "ref", "return", "sbyte",
    "sealed", "short", "sizeof", "stackalloc",
    "static", "string", "struct", "switch",
    "this", "throw", "true", "try",
    "typeof", "uint", "ulong", "unchecked",
    "unsafe", "ushort", "using", "virtual",
    "void", "volatile", "while"
].forEach(keywold => {
    csharpKeywords[keywold] = '@' + keywold;
});

function UnK(identifier) {
    return csharpKeywords.hasOwnProperty(identifier) ? csharpKeywords[identifier] : identifier;
}

function getArgument(typeInfo, argHelper, idx) {
    let typeName = typeInfo.TypeName;
    let isByRef = typeInfo.IsByRef ? "true" : "false";
    if (typeInfo.IsParams) {
        return `${argHelper}.GetParams<${typeName}>(info, ${idx}, paramLen)`;
    } else if (typeInfo.IsEnum) {
        return `(${typeName})${argHelper}.${fixGet[typeInfo.UnderlyingTypeName]}(${isByRef})`;
    } else if (typeName in fixGet) {
        return `${argHelper}.${fixGet[typeName]}(${isByRef})`;
    } else {
        return `${argHelper}.Get<${typeName}>(${isByRef})`;
    }
}
function setReturn(typeInfo) {
    let typeName = typeInfo.TypeName;
    if (typeName in fixReturn) {
        return fixReturn[typeName];
    } else if (typeInfo.IsEnum) {
        return fixReturn[typeInfo.UnderlyingTypeName].replace('result', `(${typeInfo.UnderlyingTypeName})result`);
    } else {
        return `Puerts.ResultHelper.Set((int)data, isolate, info, result)`;
    }
}
function operatorCall(methodName, argCount, typeInfo) {
    if (methodName == 'op_Implicit') {
        return `(${typeInfo.TypeName})arg0`;
    }
    if (argCount == 1) {
        return operatorMap[methodName] + 'arg0';
    } else if (argCount == 2) {
        return 'arg0 ' + operatorMap[methodName] + ' arg1';
    }
}

function getSelf(type) {
    if (it.BlittableCopy) {
        return `(${type.Name}*)self`;
    } else if (type.IsValueType) {
        return `(${type.Name})Puerts.Utils.GetSelf((int)data, self)`;
    } else {
        return `Puerts.Utils.GetSelf((int)data, self) as ${type.Name}`;
    }
}
function setSelf(type) {
    if (type.IsValueType) {
        return `Puerts.Utils.SetSelf((int)data, self, obj);`
    } else {
        return '';
    }
}

function refSelf() {
    return it.BlittableCopy ? "(*obj)" : "obj";
}

function paramLenCheck(group) {
    let len = group.get_Item(0).ParameterInfos.Length;
    return group.get_Item(0).HasParams ? `paramLen >= ${len - 1}` : `paramLen == ${len}`;
}

}}
namespace PuertsStaticWrap
{
    public static class {{=it.WrapClassName}}
    {
        {{?it.BlittableCopy}}static {{=it.Name}} HeapValue;
        {{?}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8ConstructorCallback))]
        {{?it.BlittableCopy}}unsafe {{?}}private static IntPtr Constructor(IntPtr isolate, IntPtr info, int paramLen, long data)
        {
            try
            {
                {{?it.Constructor}}{{~it.Constructor.OverloadGroups :overloadGroup}}
                {{?it.Constructor.HasOverloads}}if ({{=paramLenCheck(overloadGroup)}}){{?}}
                {
                    {{for(var i=0; i < overloadGroup.get_Item(0).ParameterInfos.Length; i++) {}}
                    var argHelper{{=i}} = new Puerts.ArgumentHelper((int)data, isolate, info, {{=i}});{{}}}
                    
                    {{~overloadGroup :overload}}
                    {{?it.Constructor.HasOverloads && overload.ParameterInfos.Length > 0}}if ({{~overload.ParameterInfos :paramInfo:idx}}{{?idx!=0}}
                        && {{?}}argHelper{{=idx}}.IsMatch({{=paramInfo.ExpectJsType}}, {{=paramInfo.ExpectCsType}}, {{=paramInfo.IsByRef}}, {{=paramInfo.IsOut}}){{~}}){{?}}
                    {
                        {{~overload.ParameterInfos :paramInfo:idx}}
                        var Arg{{=idx}} = {{=getArgument(paramInfo, 'argHelper' + idx, idx)}};{{~}}
                        {{=it.BlittableCopy?"HeapValue":"var result"}} = new {{=it.Name}}({{~overload.ParameterInfos :paramInfo:idx}}{{?idx!=0}},{{?}}{{=paramInfo.IsOut?"out ":(paramInfo.IsByRef?"ref ":"")}}Arg{{=idx}}{{~}});
                        {{~overload.ParameterInfos :paramInfo:idx}}{{?paramInfo.IsByRef}}
                        argHelper{{=idx}}.SetByRefValue(Arg{{=idx}});{{?}}{{~}}
                        
                        {{if(it.BlittableCopy){}}fixed ({{=it.Name}}* result = &HeapValue)
                        {
                            return new IntPtr(result);
                        }{{}else{}}return Puerts.Utils.GetObjectPtr((int)data, typeof({{=it.Name}}), result);{{}}}
                    }
                    {{~}}
                }
                {{~}}{{?}}
                {{?!it.Constructor || (it.Constructor.OverloadCount != 1)}}Puerts.PuertsDLL.ThrowException(isolate, "invalid arguments to {{=it.Name}} constructor");{{?}}
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
            return IntPtr.Zero;
        }
        {{~it.Methods :method}}
        {{?!method.IsLazyMember}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        {{?it.BlittableCopy && !method.IsStatic}}unsafe {{?}}private static void {{=(method.IsStatic ? "F" : "M")}}_{{=method.Name}}(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                {{?!method.IsStatic}}var obj = {{=getSelf(it)}};{{?}}
                {{~method.OverloadGroups :overloadGroup}}
                {{?method.HasOverloads}}if ({{=paramLenCheck(overloadGroup)}}){{?}}
                {
                    {{for(var i=0; i < overloadGroup.get_Item(0).ParameterInfos.Length; i++) {}}
                    var argHelper{{=i}} = new Puerts.ArgumentHelper((int)data, isolate, info, {{=i}});{{}}}
                    
                    {{~overloadGroup :overload}}
                    {{?method.HasOverloads && overload.ParameterInfos.Length > 0}}if ({{~overload.ParameterInfos :paramInfo:idx}}{{?idx!=0}}
                        && {{?}}argHelper{{=idx}}.{{=paramInfo.IsParams?"IsMatchParams":"IsMatch"}}({{=paramInfo.ExpectJsType}}, {{=paramInfo.ExpectCsType}}, {{=paramInfo.IsParams?idx:paramInfo.IsByRef}}, {{=paramInfo.IsParams?"paramLen":paramInfo.IsOut}}){{~}}){{?}}
                    {
                        {{~overload.ParameterInfos :paramInfo:idx}}
                        var Arg{{=idx}} = {{=getArgument(paramInfo, 'argHelper' + idx, idx)}};{{~}}
                        {{=overload.IsVoid?"":"var result = "}}{{=method.IsStatic?it.Name:refSelf()}}.{{=UnK(method.Name)}}({{~overload.ParameterInfos :paramInfo:idx}}{{?idx!=0}},{{?}}{{=paramInfo.IsOut?"out ":(paramInfo.IsByRef?"ref ":"")}}Arg{{=idx}}{{~}});
                        {{~overload.ParameterInfos :paramInfo:idx}}{{?paramInfo.IsByRef}}
                        argHelper{{=idx}}.SetByRefValue(Arg{{=idx}});{{?}}{{~}}
                        {{?!overload.IsVoid}}{{=setReturn(overload)}};{{?}}
                        {{?!it.BlittableCopy && !method.IsStatic}}{{=setSelf(it)}}{{?}}
                        {{?method.HasOverloads}}return;{{?}}
                    }
                    {{~}}
                }
                {{~}}
                {{?method.HasOverloads}}Puerts.PuertsDLL.ThrowException(isolate, "invalid arguments to {{=method.Name}}");{{?}}
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        {{?}}
        {{~}}

        {{~it.Properties :property}}
        {{?!property.IsLazyMember}}
        {{?property.HasGetter}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        {{?it.BlittableCopy && !property.IsStatic}}unsafe {{?}}private static void G_{{=property.Name}}(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                {{?!property.IsStatic}}var obj = {{=getSelf(it)}};{{?}}
                var result = {{=property.IsStatic?it.Name:refSelf()}}.{{=UnK(property.Name)}};
                {{=setReturn(property)}};
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }{{?}}
        {{?property.HasSetter}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        {{?it.BlittableCopy && !property.IsStatic}}unsafe {{?}}private static void S_{{=property.Name}}(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                {{?!property.IsStatic}}var obj = {{=getSelf(it)}};{{?}}
                var argHelper = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                {{=property.IsStatic?it.Name:refSelf()}}.{{=UnK(property.Name)}} = {{=getArgument(property, 'argHelper')}};
                {{?!it.BlittableCopy && !property.IsStatic}}{{=setSelf(it)}}{{?}}
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }{{?}}
        {{?}}
        {{~}}

        {{?it.GetIndexs.Length > 0}}
        {{?!it.IsLazyMember}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        {{?it.BlittableCopy}}unsafe {{?}}private static void GetItem(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var obj = {{=getSelf(it)}};
                var keyHelper = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                {{~it.GetIndexs :indexInfo}}
                if (keyHelper.IsMatch({{=indexInfo.IndexParameter.ExpectJsType}}, {{=indexInfo.IndexParameter.ExpectCsType}}, {{=indexInfo.IndexParameter.IsByRef}}, {{=indexInfo.IndexParameter.IsOut}}))
                {
                    var key = {{=getArgument(indexInfo.IndexParameter, 'keyHelper')}};
                    var result = {{=refSelf()}}[key];
                    {{=setReturn(indexInfo)}};
                    return;
                }
                {{~}}
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        {{?}}
        {{?}}
        {{?it.SetIndexs.Length > 0}}
        {{?!it.IsLazyMember}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        {{?it.BlittableCopy}}unsafe {{?}}private static void SetItem(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var obj = {{=getSelf(it)}};
                var keyHelper = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                var valueHelper = new Puerts.ArgumentHelper((int)data, isolate, info, 1);
                {{~it.SetIndexs :indexInfo}}
                if (keyHelper.IsMatch({{=indexInfo.IndexParameter.ExpectJsType}}, {{=indexInfo.IndexParameter.ExpectCsType}}, {{=indexInfo.IndexParameter.IsByRef}}, {{=indexInfo.IndexParameter.IsOut}}))
                {
                    var key = {{=getArgument(indexInfo.IndexParameter, 'keyHelper')}};
                    {{=refSelf()}}[key] = {{=getArgument(indexInfo, 'valueHelper')}};
                    return;
                }
                {{~}}
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        {{?}}
        {{?}}
        {{~it.Operators :operator}}
        {{?!operator.IsLazyMember}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void O_{{=operator.Name}}(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                {{~operator.OverloadGroups :overloadGroup}}
                {{?operator.HasOverloads}}if ({{=paramLenCheck(overloadGroup)}}){{?}}
                {
                    {{for(var i=0; i < overloadGroup.get_Item(0).ParameterInfos.Length; i++) {}}
                    var argHelper{{=i}} = new Puerts.ArgumentHelper((int)data, isolate, info, {{=i}});{{}}}
                    
                    {{~overloadGroup :overload}}
                    {{?operator.HasOverloads && overload.ParameterInfos.Length > 0}}if ({{~overload.ParameterInfos :paramInfo:idx}}{{?idx!=0}}
                        && {{?}}argHelper{{=idx}}.IsMatch({{=paramInfo.ExpectJsType}}, {{=paramInfo.ExpectCsType}}, {{=paramInfo.IsByRef}}, {{=paramInfo.IsOut}}){{~}}){{?}}
                    {
                        {{~overload.ParameterInfos :paramInfo:idx}}
                        var arg{{=idx}} = {{=getArgument(paramInfo, 'argHelper' + idx, idx)}};{{~}}
                        var result = {{=operatorCall(operator.Name, overload.ParameterInfos.Length, overload)}};
                        {{?!overload.IsVoid}}{{=setReturn(overload)}};{{?}}
                        {{?operator.HasOverloads}}return;{{?}}
                    }
                    {{~}}
                }
                {{~}}
                {{?operator.HasOverloads}}Puerts.PuertsDLL.ThrowException(isolate, "invalid arguments to {{=operator.Name}}");{{?}}
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        {{?}}
        {{~}}
        {{~it.Events :eventInfo}}
        {{?!eventInfo.IsLazyMember}}
        {{?eventInfo.HasAdd}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        {{?it.BlittableCopy && !eventInfo.IsStatic}}unsafe {{?}}private static void A_{{=eventInfo.Name}}(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                {{?!eventInfo.IsStatic}}var obj = {{=getSelf(it)}};{{?}}
                var argHelper = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                {{=eventInfo.IsStatic?it.Name:refSelf()}}.{{=eventInfo.Name}} += {{=getArgument(eventInfo, 'argHelper')}};
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        {{?}}{{?eventInfo.HasRemove}}
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        {{?it.BlittableCopy && !eventInfo.IsStatic}}unsafe {{?}}private static void R_{{=eventInfo.Name}}(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                {{?!eventInfo.IsStatic}}var obj = {{=getSelf(it)}};{{?}}
                var argHelper = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                {{=eventInfo.IsStatic?it.Name:refSelf()}}.{{=eventInfo.Name}} -= {{=getArgument(eventInfo, 'argHelper')}};
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        {{?}}
        {{?}}{{~}}
        public static Puerts.TypeRegisterInfo GetRegisterInfo()
        {
            return new Puerts.TypeRegisterInfo()
            {
                BlittableCopy = {{=it.BlittableCopy}},
                Constructor = Constructor,
                Methods = new System.Collections.Generic.Dictionary<Puerts.MethodKey, Puerts.V8FunctionCallback>()
                {
                    {{~it.Methods :method}}{{?!method.IsLazyMember}}
                    { new Puerts.MethodKey {Name = "{{=method.Name}}", IsStatic = {{=method.IsStatic}}}, {{=(method.IsStatic ? "F" : "M")}}_{{=method.Name}} },
                    {{?}}{{~}}
                    {{?it.GetIndexs.Length > 0}}{{?!it.IsLazyMember}}
                    { new Puerts.MethodKey {Name = "get_Item", IsStatic = false}, GetItem },
                    {{?}}{{?}}
                    {{?it.SetIndexs.Length > 0}}{{?!it.IsLazyMember}}
                    { new Puerts.MethodKey {Name = "set_Item", IsStatic = false}, SetItem },
                    {{?}}{{?}}
                    {{~it.Operators :operator}}{{?!operator.IsLazyMember}}
                    { new Puerts.MethodKey {Name = "{{=operator.Name}}", IsStatic = true}, O_{{=operator.Name}} },
                    {{?}}{{~}}
                    {{~it.Events :eventInfo}}{{?!eventInfo.IsLazyMember}}
                    {{?eventInfo.HasAdd}}       { new Puerts.MethodKey {Name = "add_{{=eventInfo.Name}}", IsStatic = {{=eventInfo.IsStatic}}}, A_{{=eventInfo.Name}} },       {{?}}
                    {{?eventInfo.HasRemove}}        { new Puerts.MethodKey {Name = "remove_{{=eventInfo.Name}}", IsStatic = {{=eventInfo.IsStatic}}},  R_{{=eventInfo.Name}} },        {{?}}
                    {{?}}{{~}}
                },
                Properties = new System.Collections.Generic.Dictionary<string, Puerts.PropertyRegisterInfo>()
                {
                    {{~it.Properties :property}}{{?!property.IsLazyMember}}
                    {"{{=property.Name}}", new Puerts.PropertyRegisterInfo(){ IsStatic = {{=property.IsStatic}}, Getter = {{=property.HasGetter?"G_"+property.Name:"null"}}, Setter = {{=property.HasSetter?"S_"+property.Name:"null"}}} },
                    {{?}}{{~}}
                },
                LazyMethods = new System.Collections.Generic.Dictionary<Puerts.MethodKey, Puerts.V8FunctionCallback>()
                {
                    {{~it.Methods :method}}{{?method.IsLazyMember}}
                    { new Puerts.MethodKey {Name = "{{=method.Name}}", IsStatic = {{=method.IsStatic}}},  null},
                    {{?}}{{~}}
                    {{?it.GetIndexs.Length > 0}}{{?it.IsLazyMember}}
                    { new Puerts.MethodKey {Name = "get_Item", IsStatic = false}, null },
                    {{?}}{{?}}
                    {{?it.SetIndexs.Length > 0}}{{?it.IsLazyMember}}
                    { new Puerts.MethodKey {Name = "set_Item", IsStatic = false}, null},
                    {{?}}{{?}}
                    {{~it.Operators :operator}}{{?operator.IsLazyMember}}
                    { new Puerts.MethodKey {Name = "{{=operator.Name}}", IsStatic = true}, null},
                    {{?}}{{~}}
                    {{~it.Events :eventInfo}}{{?eventInfo.IsLazyMember}}
                    {{?eventInfo.HasAdd}}       { new Puerts.MethodKey {Name = "add_{{=eventInfo.Name}}", IsStatic = {{=eventInfo.IsStatic}}}, null},       {{?}}
                    {{?eventInfo.HasRemove}}        { new Puerts.MethodKey {Name = "remove_{{=eventInfo.Name}}", IsStatic = {{=eventInfo.IsStatic}}}, null},        {{?}}
                    {{?}}{{~}}
                },
                LazyProperties = new System.Collections.Generic.Dictionary<string, Puerts.PropertyRegisterInfo>()
                {
                    {{~it.Properties :property}}{{?property.IsLazyMember}}
                    {"{{=property.Name}}", new Puerts.PropertyRegisterInfo(){ IsStatic = {{=property.IsStatic}} } },
                    {{?}}{{~}}
                }
            };
        }
        {{?it.BlittableCopy}}
        unsafe private static {{=it.Name}} StaticGetter(int jsEnvIdx, IntPtr isolate, Puerts.IGetValueFromJs getValueApi, IntPtr value, bool isByRef)
        {
            {{=it.Name}}* result = ({{=it.Name}}*)getValueApi.GetNativeObject(isolate, value, isByRef);
            return result == null ? default({{=it.Name}}) : *result;
        }

        unsafe private static void StaticSetter(int jsEnvIdx, IntPtr isolate, Puerts.ISetValueToJs setValueApi, IntPtr value, {{=it.Name}} val)
        {
            HeapValue = val;
            fixed ({{=it.Name}}* result = &HeapValue)
            {
                var typeId = Puerts.JsEnv.jsEnvs[jsEnvIdx].GetTypeId(typeof({{=it.Name}}));
                setValueApi.SetNativeObject(isolate, value, typeId, new IntPtr(result));
            }
        }
        
        public static void InitBlittableCopy(Puerts.JsEnv jsEnv)
        {
            Puerts.StaticTranslate<{{=it.Name}}>.ReplaceDefault(StaticSetter, StaticGetter);
            int jsEnvIdx = jsEnv.Index;
            jsEnv.RegisterGeneralGetSet(typeof({{=it.Name}}), (IntPtr isolate, Puerts.IGetValueFromJs getValueApi, IntPtr value, bool isByRef) =>
            {
                return StaticGetter(jsEnvIdx, isolate, getValueApi, value, isByRef);
            }, (IntPtr isolate, Puerts.ISetValueToJs setValueApi, IntPtr value, object obj) => 
            {
                StaticSetter(jsEnvIdx, isolate, setValueApi, value, ({{=it.Name}})obj);
            });
        }
        {{?}}
    }
}