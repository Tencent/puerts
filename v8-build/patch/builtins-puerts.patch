diff --git a/.gitignore b/.gitignore
index ffbf9ce355..c408c7d7c7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -104,3 +104,5 @@ turbo*.dot
 turbo*.json
 v8.ignition_dispatches_table.json
 
+build.sh
+puerts
\ No newline at end of file
diff --git a/include/v8.h b/include/v8.h
index 18d72f1630..af2144ac99 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -38,6 +38,9 @@
  */
 namespace v8 {
 
+namespace Puerts {
+  class FunctionCallbackInfo;
+}
 class AccessorSignature;
 class Array;
 class ArrayBuffer;
@@ -307,6 +310,7 @@ class Local {
   template <class F>
   friend class MaybeLocal;
   template<class F> friend class FunctionCallbackInfo;
+  friend class Puerts::FunctionCallbackInfo;
   template<class F> friend class PropertyCallbackInfo;
   friend class String;
   friend class Object;
@@ -12038,6 +12042,69 @@ size_t SnapshotCreator::AddData(Local<T> object) {
  */
 
 
+namespace Puerts {
+  
+  typedef void (*CallbackFunction)(v8::Isolate* Isolate, const v8::Puerts::FunctionCallbackInfo& Info, void* Self, int ParamLen, int64_t UserData);
+  
+  struct FunctionInfo { 
+    bool isStatic;
+    CallbackFunction callback;
+    void* bindData;
+  };
+  class FunctionCallbackInfo {
+    class ReturnValue {
+      protected:
+        internal::Address* value_;
+        bool* is_return_value_setted_;
+      public:
+        ReturnValue(internal::Address* slot, bool* isReturnValueSetted) 
+          : value_(slot), is_return_value_setted_(isReturnValueSetted) {}
+        internal::Address* Get() 
+        {
+          return value_;
+        }
+        void Set(const Local<Value> handle);
+    };
+    private:
+      internal::Address* return_value_;
+      bool* is_return_value_setted_;
+      internal::Address* values_;
+      int length_;
+    public:
+      FunctionCallbackInfo(
+        internal::Address* address, 
+        internal::Address* returnValue, 
+        bool* isReturnValueSetted,
+        int length
+      ) {
+        this->values_ = address;
+        this->length_ = length;
+        return_value_ = returnValue;
+        is_return_value_setted_ = isReturnValueSetted;
+      }
+      FunctionCallbackInfo(
+        v8::Local<v8::Value> address, 
+        int length
+      ) {
+        this->values_ = reinterpret_cast<internal::Address*>(*address);
+        this->length_ = length;
+      }
+      ReturnValue GetReturnValue() const {
+        return ReturnValue(return_value_, is_return_value_setted_);
+      }
+      int Length() const {
+        return length_;
+      }
+      Local<Value> operator[](int i) const {
+      #ifdef V8_REVERSE_JSARGS
+        return Local<Value>(reinterpret_cast<Value*>(values_ + i));
+      #else
+        return Local<Value>(reinterpret_cast<Value*>(values_ - i));
+      #endif
+      }
+  };
+}
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_H_
diff --git a/src/api/api.cc b/src/api/api.cc
index 93780bceec..0b600916ad 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -11181,6 +11181,12 @@ void InvokeFinalizationRegistryCleanupFromTask(
 #undef CALLBACK_SETTER
 
 }  // namespace internal
+
+void Puerts::FunctionCallbackInfo::ReturnValue::Set(const v8::Local<v8::Value> handle) {
+  *is_return_value_setted_ = true;
+  *value_ = *reinterpret_cast<internal::Address*>(*handle);
+}
+
 }  // namespace v8
 
 #undef TRACE_BS
diff --git a/src/builtins/builtins-api.cc b/src/builtins/builtins-api.cc
index 6eb6f87c74..c7b185d30d 100644
--- a/src/builtins/builtins-api.cc
+++ b/src/builtins/builtins-api.cc
@@ -309,5 +309,73 @@ BUILTIN(HandleApiCallAsConstructor) {
   return HandleApiCallAsFunctionOrConstructor(isolate, true, args);
 }
 
+
+V8_WARN_UNUSED_RESULT MaybeHandle<Object> PuertsCallHandler(
+  internal::Isolate* isolate, 
+  internal::JSObject puertsThis,
+  BuiltinArguments&  args
+) {
+  Puerts::FunctionInfo* functionInfo = (Puerts::FunctionInfo*)Foreign::cast(
+    JSObject::cast(puertsThis.GetEmbedderField(0)).GetEmbedderField(0)
+  ).foreign_address();
+  
+  int argLength = args.length() - 1;
+  internal::Address returnValue = 0;
+  bool isReturnValueSetted = false;
+  Puerts::FunctionCallbackInfo callbackInfo(
+    args.address_of_arg_at(1), 
+    &returnValue,
+    &isReturnValueSetted,
+    argLength
+  );
+  
+  functionInfo->callback(
+    reinterpret_cast<v8::Isolate*>(isolate),
+    callbackInfo,
+    functionInfo->isStatic ? nullptr : reinterpret_cast<void*>(
+      internal::Internals::ReadExternalPointerField(
+        isolate,
+        args.at(0)->ptr(),
+        internal::Internals::kJSObjectHeaderSize
+      )
+    ),
+    argLength,
+    (int64_t)functionInfo->bindData
+  );
+  RETURN_EXCEPTION_IF_SCHEDULED_EXCEPTION(isolate, Object);
+
+  if (isReturnValueSetted) {
+    return MaybeHandle<Object>(internal::Object(returnValue), isolate);
+
+  } else {
+    return isolate->factory()->undefined_value();
+  }
+
+}
+
+BUILTIN(ApiPuertsCallback) {
+  Handle<JSFunction> callbackFun = args.target();
+  RETURN_RESULT_OR_FAILURE(
+    isolate, 
+    PuertsCallHandler(
+      isolate, 
+      JSObject::cast(callbackFun->shared().function_data()),
+      args
+    )
+  );
+}
+
+BUILTIN(ApiPuertsMakeCallback) {
+  Handle<String> internalized_name = args.at<String>(1);
+
+  NewFunctionArgs funArgs = NewFunctionArgs::ForBuiltinWithoutPrototype(
+      internalized_name, Builtins::kApiPuertsCallback, LanguageMode::kStrict);
+  Handle<JSFunction> fun = isolate->factory()->NewFunction(funArgs);
+  fun->shared().set_native(true);
+  fun->shared().DontAdaptArguments();
+  fun->shared().set_function_data(*args.at(2), WriteBarrierMode::UPDATE_WRITE_BARRIER);
+
+  return *fun;
+}
 }  // namespace internal
 }  // namespace v8
diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
index 84ddf55f6f..5df968e57d 100644
--- a/src/builtins/builtins-definitions.h
+++ b/src/builtins/builtins-definitions.h
@@ -792,6 +792,8 @@ namespace internal {
   TFJ(StringPrototypeTrimStart, kDontAdaptArgumentsSentinel)                   \
   /* ES6 #sec-string.raw */                                                    \
   CPP(StringRaw)                                                               \
+  CPP(ApiPuertsCallback)                                                  \
+  CPP(ApiPuertsMakeCallback)                                                  \
                                                                                \
   /* Symbol */                                                                 \
   /* ES #sec-symbol-constructor */                                             \
diff --git a/src/builtins/builtins-string.cc b/src/builtins/builtins-string.cc
index 8a897765c8..4a6e54798f 100644
--- a/src/builtins/builtins-string.cc
+++ b/src/builtins/builtins-string.cc
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "src/api/api-inl.h"
 #include "src/builtins/builtins-utils-inl.h"
 #include "src/builtins/builtins.h"
 #include "src/heap/heap-inl.h"  // For ToBoolean. TODO(jkummerow): Drop.
@@ -484,5 +485,17 @@ BUILTIN(StringRaw) {
   RETURN_RESULT_OR_FAILURE(isolate, result_builder.Finish());
 }
 
+void* GetPointer(v8::Local<v8::Value> Value, int Index = 0)
+{
+  if (Value.IsEmpty() || !Value->IsObject() || Value->IsUndefined() || Value->IsNull())
+  {
+      return nullptr;
+  }
+  auto Object = v8::Object::Cast(*Value);
+  return Object->InternalFieldCount() > Index ?
+      Object->GetAlignedPointerFromInternalField(Index) : nullptr;
+}
+
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc
index f4049e328e..5b41e1ceed 100644
--- a/src/init/bootstrapper.cc
+++ b/src/init/bootstrapper.cc
@@ -1917,6 +1917,14 @@ void Genesis::InitializeGlobal(Handle<JSGlobalObject> global_object,
     SimpleInstallFunction(isolate_, string_fun, "raw", Builtins::kStringRaw, 1,
                           false);
 
+    // === zombie ===
+
+    Handle<JSObject> puerts_object =
+        factory->NewJSObject(isolate_->object_function(), AllocationType::kOld);
+    JSObject::AddProperty(isolate_, global, "PuertsV8", puerts_object, DONT_ENUM);
+
+    SimpleInstallFunction(isolate_, puerts_object, "makeCallback", Builtins::kApiPuertsMakeCallback, 1, false);
+
     // Create the %StringPrototype%
     Handle<JSPrimitiveWrapper> prototype = Handle<JSPrimitiveWrapper>::cast(
         factory->NewJSObject(string_fun, AllocationType::kOld));
